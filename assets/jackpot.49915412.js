import{h as n}from"./numbers.03942671.js";import{M as P,E as d,a as u,f as w}from"./ethers.08671b99.js";import{P as l}from"./PowerBall__factory.a972b225.js";import{c as o}from"./networks.9d63c03e.js";import{B as m}from"./ethers.0cd5324d.js";const g=new P({ethersProvider:d.rpcProvider}),y=l.connect(o.contracts.lottery,d.rpcProvider),c=async()=>l.connect(o.contracts.lottery,(await d.Web3().getProvider()).getSigner());async function V(e,a,r){return(await c()).updateDrawingResult(e,a,Object.entries(r))}async function C(e){return(await c()).claimTicket(e)}async function A(e){return(await c()).batchClaimTickets(e)}async function R(e,a){const r=a.map(t=>t.numbers||[]).filter(t=>t.length>0),s=(await(await c()).feePerTicket()).mul(r.length);return(await c()).printTickets(e,r,{value:s})}async function E(){const e=await y.activeDrawingId();if(e.lte(0))return{tokens:void 0,result:void 0,resultDate:void 0,nextDrawing:void 0,nextDrawingId:e.toNumber(),fee:void 0,giveaway:void 0};const a=[{reference:"token",abi:u.abi,contractAddress:o.contracts.token,calls:[{reference:"decimals",methodName:"decimals",methodParameters:[]}]},{reference:"jackpot",abi:l.abi,contractAddress:o.contracts.lottery,calls:[{reference:"tokens",methodName:"rewardsPool",methodParameters:[]},{reference:"numbers",methodName:"getDrawingNumbers",methodParameters:[e.sub(1)]},{reference:"date",methodName:"getDrawing",methodParameters:[e.sub(1)]},{reference:"nextDrawing",methodName:"getDrawing",methodParameters:[e]},{reference:"fee",methodName:"feePerTicket",methodParameters:[]},{reference:"tokensForTicket",methodName:"tokensForTicket",methodParameters:[]},{reference:"giveawayStart",methodName:"giveawayStart",methodParameters:[]},{reference:"giveawayEnd",methodName:"giveawayEnd",methodParameters:[]},{reference:"maxTicketsPerGiveaway",methodName:"maxTicketsPerGiveaway",methodParameters:[]}]}],r=(await g.call(a)).results,s=r.token.callsReturnContext[0].returnValues[0],t=r.jackpot.callsReturnContext,i=t[1].returnValues.map(x=>n(x.hex)),f=n(t[2].returnValues[0].hex),h=n(t[3].returnValues[0].hex),k=m.from(t[4].returnValues[0]),b={tokens:m.from(t[5].returnValues[0]),startAt:n(t[6].returnValues[0].hex),endAt:n(t[7].returnValues[0].hex),maxTickets:n(t[8].returnValues[0].hex)};return{tokens:w(t[0].returnValues[0],s),result:i.length>0?{numbers:i}:void 0,resultDate:f>0?f*1e3:void 0,nextDrawing:h>0?h*1e3:void 0,nextDrawingId:e.toNumber(),fee:k,giveaway:b}}async function j(e){const a=[{reference:"token",abi:u.abi,contractAddress:o.contracts.token,calls:[{reference:"decimals",methodName:"decimals",methodParameters:[]}]},{reference:"mainToken",abi:u.abi,contractAddress:o.contracts.mainToken,calls:[{reference:"balance",methodName:"balanceOf",methodParameters:[e]}]},{reference:"lottery",abi:l.abi,contractAddress:o.contracts.lottery,calls:[{reference:"pool",methodName:"rewardsPool",methodParameters:[]},{reference:"turns",methodName:"getTurns",methodParameters:[e]}]}],r=(await g.call(a)).results,s=r.lottery.callsReturnContext,t=r.token.callsReturnContext[0].returnValues[0],i=m.from(r.mainToken.callsReturnContext[0].returnValues[0]);return{pool:w(m.from(s[0].returnValues[0].hex),t),turns:n(s[1].returnValues[0].hex),balance:i}}export{E as a,A as b,C as c,j as g,R as p,V as u};
